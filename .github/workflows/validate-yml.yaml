# Name of the workflow, visible in the GitHub Actions UI
name: Validate YML File

# Define the events that trigger the workflow
on:
  # Trigger the workflow when there are changes to .yml files on push
  push:
    paths:
      - "**.yml" # Trigger workflow if any .yml file is changed in the repository

  # Trigger the workflow on pull request if there are changes to .yml files
  pull_request:
    paths:
      - "**.yml" # Trigger workflow if any .yml file is changed in a pull request

  # Allow manual triggering of the workflow through the GitHub UI
  workflow_dispatch: # Allows users to manually trigger this workflow

# Define the jobs section where the steps to run are listed
jobs:
  validate:
    runs-on: ubuntu-latest # Specifies the operating system for the runner (latest Ubuntu version)

    steps:
      # Checkout the repository's code to the GitHub Actions runner
      - name: Checkout repository # Step description in GitHub Actions UI
        uses: actions/checkout@v2 # Action used to check out the code from the repository

      # Set up Golang environment
      - name: Setup Go # Step description in GitHub Actions UI
        uses: actions/setup-go@v5 # Use the setup-go action to install Go
        with:
          go-version: 1.20 # Specify the Go version to use
          check-latest: true # Check for the latest version of Go

      # Install Requirements.
      - name: Install Requirements # Step description in GitHub Actions UI
        run: sudo apt-get update && sudo apt-get install -y git coreutils curl tar

      # Install yamlfmt
      - name: Install yamlfmt # Step description in GitHub Actions UI
        run: |
          # Define temporary directory
          TEMP_DIR=$(mktemp -d)
          # Determine the system architecture
          ARCH=$(uname -m)
          # Set the tarball name based on the architecture
          TARBALL="yamlfmt_0.16.0_Linux_${ARCH}.tar.gz"
          # Download the tarball to the temp directory
          curl -Lo "$TEMP_DIR/$TARBALL" "https://github.com/google/yamlfmt/releases/download/v0.16.0/$TARBALL"
          # Extract the tarball in the temp directory
          tar -xzf "$TEMP_DIR/$TARBALL" -C "$TEMP_DIR"
          # Move the yamlfmt binary to the correct location
          mv "$TEMP_DIR/yamlfmt" /usr/local/bin/
          # Clean up: Remove temporary directory and other files
          rm -rf "$TEMP_DIR"

      # Install yamllint, a tool to validate .yml files, via apt-get
      - name: Install yamllint # Step description in GitHub Actions UI
        run: sudo apt-get update && sudo apt-get install -y yamllint # Install yamllint using apt-get

      # Run yamllint and yamlfmt
      - name: Run yamllint to print errors # Step description in GitHub Actions UI
        run: |
          # Loop through all .yml files and run yamlfmt and yamllint
          for file in $(find . -name "*.yml"); do # Loop through each .yml file in the repository
            echo "Validating file: $file"  # Print the name of the file being validated
            # Run yamlfmt to format the .yml file
            yamlfmt "$file"  # Format the .yml file using yamlfmt, overwriting the original file
            # Run yamllint on the file and print errors if any
            yamllint "$file"  # Validate the .yml file using yamllint, it will print errors if any
          done # End of the loop over all .yml files
