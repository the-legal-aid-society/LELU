# Name of the workflow, visible in the GitHub Actions UI
name: Validate TSV File

# Define the events that trigger the workflow
on:
  # Trigger the workflow when there are changes to .tsv files on push
  push:
    paths:
      - "**.tsv" # Trigger workflow if any .tsv file is changed in the repository

  # Trigger the workflow on pull request if there are changes to .tsv files
  pull_request:
    paths:
      - "**.tsv" # Trigger workflow if any .tsv file is changed in a pull request

  # Allow manual triggering of the workflow through the GitHub UI
  workflow_dispatch: # Allows users to manually trigger this workflow

# Define the jobs section where the steps to run are listed
jobs:
  validate:
    runs-on: ubuntu-latest # Specifies the operating system for the runner (latest Ubuntu version)

    steps:
      # Checkout the repository's code to the GitHub Actions runner
      - name: Checkout repository # Step description in GitHub Actions UI
        uses: actions/checkout@v2 # Action used to check out the code from the repository

      # Install csvkit & gnumeric, a tool to validate .tsv files, via apt-get
      - name: Install csvkit & gnumeric # Step description in GitHub Actions UI
        run: sudo apt-get update && sudo apt-get install -y csvkit gnumeric # Update apt repositories and install csvkit & gnumeric for validating .tsv files

      # Run csvclean with verbose output to check for errors in .tsv files
      - name: Run csvclean to print errors # Step description in GitHub Actions UI
        run: |
          # Loop through all .tsv files in the repository
          for file in $(find . -name "*.tsv"); do  # Find all .tsv files starting from the current directory
            echo "File: $file"  # Print the name of the file being validated
            csvclean -t -e utf-8 "$file"  # Validate the .tsv file with csvclean, specifying tab-delimited (-t) and utf-8 encoding (-e)
          done  # End of loop for validating all .tsv files

      # Run csvstat to print statistics of the .csv files.
      - name: Run csvstat to print statistics # Step description in GitHub Actions UI
        run: |
          # Loop through all .csv files in the repository
          for file in $(find . -name "*.csv"); do  # Find all .csv files starting from the current directory
            echo "File: $file"  # Print the name of the file being validated
            csvstat "$file"  # Print statistics about the .csv file (e.g., number of rows, columns, data types)
          done  # End of loop for generating stats on all .csv files

      # Run csvjson to convert .csv files to .json and print the result
      - name: Run csvjson to convert .csv to .json # Step description in GitHub Actions UI
        run: |
          # Loop through all .csv files in the repository
          for file in $(find . -name "*.csv"); do  # Find all .csv files starting from the current directory
            echo "File: $file"  # Print the name of the file being processed
            csvjson "$file" > "${file%.csv}.json"  # Convert the .csv file to .json and save it with the same name but with .json extension
          done  # End of loop for converting all .csv files to .json

      # Convert .tsv files to .xls format using ssconvert
      - name: Convert .tsv to .xls using ssconvert # Step description in GitHub Actions UI
        run: |
          # Loop through each .tsv file found in the repository
          for file in $(find . -name "*.tsv"); do  # Find all .tsv files starting from the current directory
            echo "File: $file"  # Print the name of the file being processed
            # Convert the .tsv file to .xls by removing the .tsv extension
            ssconvert "$file" "${file%.tsv}.xls"  # Use ssconvert to convert .tsv to .xls format and save it with the same name but with .xls extension
          done  # End of loop for converting all .tsv files to .xls

      # Step Check for changes and push the updated files back to GitHub
      - name: Push Updated Files to GitHub
        run: |
          # Configure Git user for commits made by GitHub Actions
          git config user.name github-actions  # Use "github-actions" as the username
          git config user.email github-actions@github.com  # Use GitHub Actions default email
          # If changes are detected, stage and commit the updated files
          git add .
          # Commit the changes with a message that includes the current date
          git commit -m "Updated files on $(date)"  # Commit changes with a timestamped message
          # Push the committed changes to GitHub
          git push  # Push changes to the remote repository
